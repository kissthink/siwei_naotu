git 一直跟踪的是文件的修改，而不是文件

1，git init  。实例化一个仓库
2，git add 文件名。 添加文件 可以多个  --是把修改的内容放到缓存区
3，git commit -m "注释说明" 提交文件到仓库  --是吧缓存区的内容提交到仓库

3.1 git config --global user.email "邮箱"
3.2 git config --global user.name "名字"
------------------------------------------
4，git status 查看当前仓库的情况，会返回哪个文件被修改过。
5，git diff 查看仓库里面被修改的内容
-------------------------------------------
6，git remote add origin 地址 。 
7，git push 推送本地库内容到远程，其实把master分支推送过去了。git push -u origin master 
第一次以后，推送本地到远程，直接写 git push  origin master  就可以
8，git clone 地址 从远程下载到本地
---------------------------------------------
9，
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

--------------------------------------------------------------------------
10，
场景1：如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout -- <file>就可以
场景2：如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout -- <file>
场景3：如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了
----------------------------------------------------
11，
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。